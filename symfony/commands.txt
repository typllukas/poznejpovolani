DOCKER

    docker exec -it symfony-php-1 php bin/console app:import-registrants /var/www/html/src/DataFixtures/csv/testing-set.csv


    docker exec -it symfony-php-1 php bin/console ...
                -to execute the symfony command inside the specific container



    docker exec -it symfony-php-1 php bin/console doctrine:fixtures:load 


    docker exec -it symfony-php-1 php bin/console cache:clear
                -clearing cache in php conatiner


    docker exec -it nodejs-redis-1 redis-cli  
                accesing redis container cli (to verify the existence of certain key, e.g. GET access_token, or to run INFO command, etc.)


    docker-compose exec <service_name>
                run terminal commands inside the docker container (instead of host machine)


    docker-compose exec php php redis_test.php
                running php script in redis_test.php file inside symfony-php-1 container


    docker-compose exec mysql mysql -u root -p
                run interactive mode of mysql container for additional logs!


    ping symfony-mysql-1
                ping the MySQL container using its container name symfony-mysql-1 to see if hostname resolution is working properly

    ping <ip_address>
                ping container using ip address, to see if it's accesible directly from ip address


    docker exec -it symfony-php-1 bash
                acces the container bash - files


    docker-compose exec php bash mysql -h symfony-mysql-1 -u root -p
                verify connection to the MySQL container from the Symfony application's container 


    docker ps 
                list all running containers


    docker-compose ps
                status of containers


    docker compose build --no-cache --pull
    docker compose -f docker-compose.nodejs.yml build --no-cache --pull
                build docker images - The --pull option forces Docker to check for newer versions of the images from the remote registry, even if an older version is available locally. 


    docker-compose --env-file .env up -d
    docker compose --env-file .env -f docker-compose.nodejs.yml up -d
                compose containers, development mode


    docker compose down --remove-orphans 
                complete down, including IP addresses of containers and deleting everything what is not in new compose file


    netstat -ano | findstr :8000
                finding the process on the specific port


    docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_name>
                getting the ip adress of the specific container


    docker network inspect <network_name>
                inspect network configuration of the network, including connected containers ("Containers":)


    docker network ls
                list all Docker networks


    docker network rm <network_name_or_id>
                remove the network

    docker logs <container_id>
                logs of selected containers


UBUNTU SERVER:

    wget
        -downloading files from internet

    ls -la
        -list the content of current directory

    mkdir ...
    mkdir /../...
        -make directory

    nano ...   
        -open or create a file by nano

    sudo mv
        -moving files

    git clone https://github.com/typllukas/poznejpovolani.git poznejpovolani

    sudo apt update
    &&
    sudo apt upgrade -y
                -should be user for regular updates
    sudo apt autoremove -y
    sudo apt autoclean

    systemctl list-units --type=service
                list all services

    sudo systemctl status <service_name, e.g.docker>

    q
                -quit/exit from the lists etc.
    

    ping google.com
    ping github.com
    ping <ip_address>
            -checking connectivity
    nslookup github.com
            -checking DNS resolution 

    ping6 ipv6.google.com

    ip addr show
        - list all network interfaces and their configurations

    sudo ufw status 
            (ufw: uncomplicated firewall)
    
    sudo ufw allow https
    sudo ufw allow 443

    

SERVER

IN VS CODE:

    nslookup mysql
                discover the IP address or DNS record of a specific domain name


IN WINDOWS POWERSHELL:

    Test-NetConnection -ComputerName localhost -Port 80
                checking the port connectivity, succesful test indicate that firewall settings allow traffic on this port
    
    Test-NetConnection -ComputerName localhost
                checking localhost connectivity

    netsh winhttp show proxy
                checking if proxy server is used


SYMFONY

    symfony console doctrine:fixtures:load


    symfony server:start --port=8000
                restarting symfony server on specific port


NOTES & REMINDERS:
    UBUNTU SERVER:
        rc-local.service: loaded failed failed


GIT
    git status
    
    git rm -r --cached symfony/docker/db/data/
                -excluding the parth from Git's tracking system
    git commit -m "Untrack Docker volume directory"
                -comment

